*********************************************************************
*
* Door stage init
*
door_stage_init:
       .proc
       li   r1,head_and_hands_patterns
       bl   @load_sprite_patterns
       li   r1,character_set_door
       bl   @set_character_set
       clr  @max_residents
       .endproc
*// door_stage_init

*********************************************************************
*
* Base stage init
*

base_stage_init:
       .proc
       li   r1,character_set_base
       bl   @set_character_set
       .endproc
*// base_stage_init

*********************************************************************
*
* Residents stage init
*
one_resident_stage_init:
       .proc
       li   r0,1
       jmp  residents_stage_init
two_residents_stage_init:
       .proc
       li   r0,2
       jmp  residents_stage_init
three_residents_stage_init
       .proc
       li   r0,3
residents_stage_init:
       mov  r0,@max_residents
       li   r1,character_set_residents
       bl   @set_character_set
       li   r1,head_and_hands_patterns
       bl   @load_sprite_patterns
       .endproc
*// residents_stage_init

*********************************************************************
*
* Girders and dumbbells stage init
*
two_girders_stage_init:
       .proc
       li   r5,2
       jmp  girders_stage_init
three_girders_stage_init:
       .proc
       li   r5,3
       jmp  girders_stage_init
four_girders_stage_init:
       .proc
       li   r5,4
girders_stage_init:
       li   r1,balloon_girder_patterns
       bl   @load_sprite_patterns
       li   r1,character_set_base
       bl   @set_character_set
girders_stage_init_1:
       bl   @create_girder
       dec  r5
       jne  girders_stage_init_1
       .endproc
*// girders_stage_init

*********************************************************************
*
* Bird stage init
*
bird_stage_init_level_1_4:
       .proc
       li   r4,bird_init_data_1_4
       jmp   bird_stage_init
bird_stage_init_level_2:
       .proc
       li   r4,bird_init_data_2
bird_stage_init:
       li   r1,bird_patterns
       bl   @load_sprite_patterns
       li   r1,character_set_base
       bl   @set_character_set
       mov  r4,r0
       bl   @allocate_sprite
       mov  r4,r4
       jeq  bird_stage_init_1
       mov  *r0+,@sprite_handler(r4)
       mov  *r0+,@sprite_x(r4)
       mov  *r0+,@sprite_y(r4)
       mov  *r0+,@sprite_vx(r4)
       mov  *r0+,@sprite_vy(r4)
       mov  *r0+,@sprite_count(r4)
       clr  @bird_droppings
       clr  @bird_rounds
       li   r0,bird_module
       bl   @play_module
bird_stage_init_1:
       .endproc
bird_init_data_1_4:
       data bird_handler,>0020,>0982,>0002,>0001,>0000
bird_init_data_2:
       data bird_handler,>0020,>0702,>0002,>0001,>0000
*// bird_stage_init

*********************************************************************
*
* Kong stage init
*
kong_stage_init:
       .proc
       li   r1,kong_patterns
       bl   @load_sprite_patterns
       li   r1,character_set_kong
       bl   @set_character_set
       bl   @allocate_sprite
       mov  r4,r4
       jeq  kong_stage_init_1
       li   r0,kong_init_data
       mov  *r0+,@sprite_handler(r4)
       mov  *r0+,@sprite_x(r4)
       mov  *r0+,@sprite_y(r4)
       mov  *r0+,@sprite_count(r4)
       mov  *r0+,@sprite_ax(r4)        ; Used to store current arms
       mov  *r0+,@sprite_ay(r4)        ; Used to store current side (left = 0, right <> 0)
       li   r0,kong_map
       li   r1,map_buffer+(kong_row_1_3*map_width)+3
       bl   @copy_kong_to_map
       li   r0,kong_module
       bl   @play_module
kong_stage_init_1:
       .endproc
kong_init_data:
       data kong_handler,>0058,>0448,>0000,>0000,>0000
*// kong_stage_init

*********************************************************************
*
* Sparking sign stage init
*
sparking_sign_stage_init_level_2:
       .proc
       li   r4,sparking_sign_init_data_2
       jmp  sparking_sign_stage_init
sparking_sign_stage_init_level_4:
       .proc
       li   r4,sparking_sign_init_data_4
sparking_sign_stage_init:
       li   r1,spark_patterns
       bl   @load_sprite_patterns
       li   r1,character_set_sign
       bl   @set_character_set
       mov  r4,r0
       li   r2,2
sparking_sign_stage_init_1:
       bl   @allocate_sprite
       mov  r4,r4
       jeq  sparking_sign_stage_init_2
       mov  *r0+,@sprite_handler(r4)
       mov  *r0+,@sprite_x(r4)
       mov  *r0+,@sprite_y(r4)
       mov  *r0+,@sprite_count(r4)
       mov  *r0+,@sprite_ax(r4)        ; Used to store patterns
       mov  *r0+,@sprite_ay(r4)        ; Spark ball x offset
       dec  r2
       jne  sparking_sign_stage_init_1
sparking_sign_stage_init_2:
       bl   @copy_sign_to_map
       clr  @spark_hits
       .endproc
sparking_sign_init_data_2:
       data sparking_sign_handler,>0070,>0480,>0000,sparking_sign_patterns_left,-8
       data sparking_sign_handler,>00c0,>0480,>0006,sparking_sign_patterns_right,8
sparking_sign_init_data_4:
       data sparking_sign_handler,>0070,>0a80,>0000,sparking_sign_patterns_left,-8
       data sparking_sign_handler,>00c0,>0a80,>0006,sparking_sign_patterns_right,8
*//  sparking_sign_stage_init

*********************************************************************
*
* Balloon stage init
*
balloon_stage_init:
       .proc
       li   r1,balloon_girder_patterns
       bl   @load_sprite_patterns
       li   r1,character_set_base
       bl   @set_character_set
       bl   @allocate_sprite
       mov  r4,r4
       jeq  balloon_stage_init_1
       li   r0,balloon_init_data
       mov  *r0+,@sprite_handler(r4)
       mov  *r0+,@sprite_x(r4)
       mov  *r0+,@sprite_y(r4)
       mov  *r0+,@sprite_count(r4)
       mov  *r0+,@sprite_vx(r4)
       mov  *r0+,@sprite_vy(r4)
balloon_stage_init_1:
       li   r0,balloon_module
       bl   @play_module
       .endproc
balloon_init_data:
       data  balloon_handler,>0098,>0280->0018,>00a0,>0001,>0001
*// balloon_stage_init

*********************************************************************
*
* Dropping sign stage init
*
dropping_sign_stage_init_level_3:
       .proc
       li   r4,dropping_sign_init_data_3
       jmp  dropping_sign_stage_init
dropping_sign_stage_init_level_4:
       .proc
       li   r4,dropping_sign_init_data_4
dropping_sign_stage_init:
       li   r1,dropping_sign_patterns
       bl   @load_sprite_patterns
       li   r1,character_set_base
       bl   @set_character_set
       mov  r4,r0
       bl   @allocate_sprite
       mov  r4,r4
       jeq  dropping_sign_init_1
       mov  *r0+,@sprite_handler(r4)
       mov  *r0+,@sprite_x(r4)
       mov  *r0+,@sprite_y(r4)
       mov  *r0+,@sprite_count(r4)
       mov  *r0+,@sprite_vy(r4)
       mov  *r0+,@sprite_ay(r4)
dropping_sign_init_1:
       .endproc
dropping_sign_init_data_3:
       data dropping_sign_handler,>0088,>06e0,>0020,>0000,>0002
dropping_sign_init_data_4:
       data dropping_sign_handler,>0040,>02e0,>0020,>0000,>0002
*// dropping_sign_stage_init

*********************************************************************
*
* Chopper stage init
*
chopper_stage_init:
       .proc
       li   r1,chopper_patterns
       bl   @load_sprite_patterns
       bl   @allocate_sprite
       mov  r4,r4
       jeq  chopper_stage_init_1
       li   r0,chopper_init_data
       mov  *r0+,@sprite_handler(r4)
       mov  *r0+,@sprite_x(r4)
       mov  *r0+,@sprite_y(r4)
       mov  *r0+,@sprite_count(r4)
       mov  *r0+,@sprite_vx(r4)
       mov  *r0+,@sprite_vy(r4)
chopper_stage_init_1:
       .endproc
chopper_init_data:
       data chopper_handler,>0040,>0000,>0000,>0001,>0002
*// chopper_stage_init
