*********************************************************************
*
* VDP Write To Register
*
* R0 MSB: VDP register to write to
* R0 LSB: Value to write
*
vwtr:
       swpb r0
       movb r0,@vdpwa                  ; Send low byte (value) to write to VDP register
       swpb r0
       ori  r0,>8000                   ; Set up a VDP register write operation (10)
       movb r0,@vdpwa                  ; Send high byte (address) of VDP register
       rt
*// vwtr

*********************************************************************
*
* VDP Set Write Address
*
* R0: Write address in VDP RAM
*
vwad:
       swpb r0
       movb r0,@vdpwa                  ; Send low byte of VDP RAM write address
       swpb r0
       ori  r0,>4000                   ; Set read/write bits 14 and 15 to write (01)
       movb r0,@vdpwa                  ; Send high byte of VDP RAM write address
       rt
*// vwad

*********************************************************************
*
* VDP Single Byte Write
*
* R0: Write address in VDP RAM
* R1: MSB of R1 sent to VDP RAM
*
vsbw:
       swpb r0
       movb r0,@vdpwa                  ; Send low byte of VDP RAM write address
       swpb r0
       ori  r0,>4000                   ; Set read/write bits 14 and 15 to write (01)
       movb r0,@vdpwa                  ; Send high byte of VDP RAM write address
       movb r1,*r15                    ; Write byte to VDP RAM
       rt
*// vsbw

*********************************************************************
*
* VDP multiple Byte Write
*
* R0: Write address in VDP RAM
* R1: Starting read address in CPU RAM
* R2: Number of bytes to send
*
vmbw:
       swpb r0
       movb r0,@vdpwa                  ; Send low byte of VDP RAM write address
       swpb r0
       ori  r0,>4000                   ; Set read/write bits 14 and 15 to write (01)
       movb r0,@vdpwa                  ; Send high byte of VDP RAM write address
vmbw_1:
       movb *r1+,*r15                  ; Write byte to VDP RAM
       dec  r2
       jne  vmbw_1
       rt
*// vmbw

*********************************************************************
*
* VDP Single Byte Multiple Write
*
* R0: Write address in VDP RAM
* R1: MSB of R1 sent to VDP RAM
* R2: Number of bytes to write to VDP RAM
*
vsmw:
       swpb r0
       movb  r0,@vdpwa                 ; Send low byte of VDP RAM write address
       swpb r0
       ori  r0,>4000                   ; Set read/write bits 14 and 15 to write (01)
       movb r0,@vdpwa                  ; Send high byte of VDP RAM write address
vsmw_1:
       movb r1,*r15                    ; Write byte to VDP RAM
       dec  r2                         ; Byte counter
       jne  vsmw_1
       rt
*// vsmw

*********************************************************************
*
* VDP Set Read Address
*
* R0: Read address in VDP RAM
*
vrad:
       swpb r0
       movb r0,@vdpwa                  ; Send low byte of VDP RAM read address
       swpb r0
       movb r0,@vdpwa                  ; Send high byte of VDP RAM read address
       rt
*// vrad

*********************************************************************
*
* VDP Single Byte Read
*
* R0:  Read address in VDP RAM
* R1:  MSB of R1 set to byte from VDP RAM
*
vsbr:
       swpb r0
       movb r0,@vdpwa                  ; Send low byte of VDP RAM read address
       swpb r0
       movb r0,@vdpwa                  ; Send high byte of VDP RAM read address
       nop
       movb @vdprd,r1                  ; Read byte from VDP RAM
       rt
*// vsbr

*********************************************************************
*
* VDP Multiple Byte Read
*
* R0: Starting read address in VDP RAM
* R1: Starting write address in CPU RAM
* R2: Number of bytes to read from VDP RAM
*
* Modifies R0-R2
*
vmbr:
       swpb r0
       movb  r0,@vdpwa                 ; Send low byte of VDP RAM read address
       swpb r0
       andi r0,>3fff                   ; Set read/write bits 14 and 15 to read (00)
       movb r0,@vdpwa                  ; Send high byte of VDP RAM read address
       li   r0,vdprd
vmbr_1:
       movb *r0,*r1+                   ; Read byte from VDP RAM
       dec  r2                         ; Byte counter
       jne  vmbr_1                     ; Check if finished
       rt
*// vmbr

*********************************************************************
*
* VDP Multiple 8 Byte Write
*
* This routine (or just the inner loop) can be moved into scratchpad
* memory for a performance boost of about 10%.
*
* R0: Starting write address in VDP RAM
* R1: Starting read address in CPU RAM
* R2: Number of groups of 8 bytes to send to the VDP RAM
* R3: Number of bytes to skip after reading 8 bytes
*
* R0 is modified, R1 is next read address, R2 is zero
*
vm8bw8:
       li   r3,8                       ; call here to skip 8 bytes
       jmp  vm8bw0
vm8bw:
       clr  r3                         ; call here to skip zero bytes
vm8bw0:
       .proc
       bl   @vwad                      ; setup write address
vm8bw1:
       movb *r1+,*r15                  ; write byte to vdp ram
       movb *r1+,*r15                  ; repeat 2
       movb *r1+,*r15                  ; repeat 3
       movb *r1+,*r15                  ; repeat 4
       movb *r1+,*r15                  ; repeat 5
       movb *r1+,*r15                  ; repeat 6
       movb *r1+,*r15                  ; repeat 7
       movb *r1+,*r15                  ; repeat 8 times
       a    r3,r1                      ; skip source bytes
       dec  r2                         ; group counter
       jne  vm8bw1                     ; loop if not done
       .endproc
*// vm8bw

*********************************************************************
*
* VDP Multiple 8 Byte High Write
*
* Like VM8BW but sets the most significant bit of each byte written.
* Note: only works correctly for even read addresses.
*
* R0: Starting write address in VDP RAM
* R1: Starting read address in CPU RAM (must be even)
* R2: Number of groups of 8 bytes to send to the VDP RAM
*
* R0 is modified, R1 is next read address, R2 is zero, R3 is modified
*
vm8bhw:
       .proc
       bl   @vwad                      ; setup write address
vm8bh1:
       mov  *r1+,r0                    ; read word from cpu ram
       ori  r0,>8080                   ; set most significant bits
       movb r0,*r15                    ; send msb to vdp
       movb @r0lb,*r15                 ; send lsb to vdp
       mov  *r1+,r0                    ; repeat 2
       ori  r0,>8080                   ;
       movb r0,*r15                    ;
       movb @r0lb,*r15                 ;
       mov  *r1+,r0                    ; repeat 3
       ori  r0,>8080                   ;
       movb r0,*r15                    ;
       movb @r0lb,*r15                 ;
       mov  *r1+,r0                    ; repeat 4 times
       ori  r0,>8080                   ;
       movb r0,*r15                    ;
       movb @r0lb,*r15                 ;
       dec  r2                         ; group counter
       jne  vm8bh1                     ; loop if not done
       .endproc
*// vm8bhw

*********************************************************************
*
* Copy one row of the map (22 bytes) to VDP
*
copy_row:
       .proc
       bl   @vwad
       li   r3,2                       ; 2 * 11
copy_row_1:
       movb *r1+,*r15                  ; Copy 11 bytes
       movb *r1+,*r15
       movb *r1+,*r15
       movb *r1+,*r15
       movb *r1+,*r15
       movb *r1+,*r15
       movb *r1+,*r15
       movb *r1+,*r15
       movb *r1+,*r15
       movb *r1+,*r15
       movb *r1+,*r15
       dec  r3
       jne copy_row_1
       .endproc
*// copy_row

*********************************************************************
*
* Copy one row of the map (22 bytes) to VDP,
* setting the most significant bit of each byte written.
*
copy_row_hi:
       .proc
       bl   @vwad
       li   r3,3                       ; 3 * 8 - 2
       jmp  copy_row_hi_2              ; First time only copy 6 bytes
copy_row_hi_1:
       mov  *r1+,r2
       ori  r2,>8080
       movb r2,*r15                    ; Byte 1
       movb @r2lb,*r15                 ; Byte 2
copy_row_hi_2:
       mov  *r1+,r2
       ori  r2,>8080
       movb r2,*r15                    ; Byte 3
       movb @r2lb,*r15                 ; Byte 4
       mov  *r1+,r2
       ori  r2,>8080
       movb r2,*r15                    ; Byte 5
       movb @r2lb,*r15                 ; Byte 6
       mov  *r1+,r2
       ori  r2,>8080
       movb r2,*r15                    ; Byte 7
       movb @r2lb,*r15                 ; Byte 8
       dec  r3
       jne copy_row_hi_1
       .endproc
*// copy_row_hi

*********************************************************************
*
* Unrolled VDP copy loop
*
vdp_copy:
       movb *r1+,*r15                  ; Send by to VDP
       movb *r1+,*r15                  ; ...
       movb *r1+,*r15                  ; ...
       movb *r1+,*r15                  ; ...
       movb *r1+,*r15                  ; ...
       movb *r1+,*r15                  ; ...
       movb *r1+,*r15                  ; ...
       movb *r1+,*r15                  ; ...
       dec  r2                         ; Counter
       jne  vdp_copy                   ; Loop
       rt
vdp_copy_end:
       equ  $
*// vdp_copy
